/**
 * 
 */
package eu.scape_project.pc.cc.nanite.tika;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;

import org.apache.commons.io.IOUtils;
import org.apache.log4j.Logger;
import org.apache.tika.Tika;
import org.apache.tika.metadata.Metadata;
import org.apache.tika.parser.CompositeParser;
import org.apache.tika.parser.ParseContext;
import org.apache.tika.sax.WriteOutContentHandler;

/**
 * @author Andrew Jackson <Andrew.Jackson@bl.uk>
 *
 */
public class TikaDeepIdentifier {
	private static Logger log = Logger.getLogger(TikaDeepIdentifier.class.getName());
	
	Tika tika = new Tika();

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		System.out.println("TEST...");
		TikaDeepIdentifier tdi = new TikaDeepIdentifier();
		System.out.println("GOT: "+tdi.identify(new byte[] {'%','P','D','F','-'}));
	}

	/**
	 * 
	 * @param payload
	 * @return
	 */
	public String identify(byte[] payload) {
		String tikaType = "application/octet-stream";
		try {
			// Type according to Tiki:
			tikaType = tika.detect( payload );
		} catch( Throwable e ) {
			log.error( e.getMessage() );
			e.printStackTrace();
			//output.collect( new Text("LOG:ERROR Tika.detect threw exception: "+e+"\n"+getStackTrace(e)), new Text(key+" "+tmpFile+" "+value));
		}

		// Now perform full parse, to find a more detailed tikaType
		try {
			// Set up metadata object:
			Metadata md = new Metadata();
			
			// Abort handler, limiting the output size, to avoid OOM:
			WriteOutContentHandler ch = new WriteOutContentHandler(MAX_BUF);
			// Silent handler:
			//ContentHandler ch = new DefaultHandler();
			
			// Set up a parse context:
			ParseContext ctx = new ParseContext();
			// Set up the parser:
			CompositeParser parser = new PreservationParser();
			// Now perform the parsing:
			parser.parse( new ByteArrayInputStream( payload ), ch, md, ctx );
			// One could forcibly limit the size if OOM is still causing problems, like this:
			//parser.parse( new ByteArrayInputStream( value.getPayload(), 0, BUF_8KB ), ch, md, ctx );
			
			// Use the extended MIME type generated by the PreservationParser:
			tikaType = md.get(PreservationParser.EXT_MIME_TYPE);
			
		} catch( Throwable e ) {
			log.error( "Tika Exception: " + e.getMessage() );
			e.printStackTrace();
		}
		// Return whichever value works:
		return tikaType;
	}

	private File copyToTempFile( String name, byte[] content, int max_bytes ) throws Exception {
		File tmp = File.createTempFile("FmtTmp-", name);
		tmp.deleteOnExit();
		FileOutputStream fos = new FileOutputStream(tmp);
		IOUtils.copy(new ByteArrayInputStream(content, 0, max_bytes), fos);
		fos.flush();
		fos.close();
		return tmp;
	}
	
	private static int MAX_BUF = 16*1024;

	private File copyToTempFile( String name, byte[] content ) throws Exception {
		//if( content.length < BUF_8KB )
		return copyToTempFile(name, content, MAX_BUF);
	}
	
}
